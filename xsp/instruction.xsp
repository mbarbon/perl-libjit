%module{LibJIT};

%package{LibJIT::API};

#include "helpers.h"

IV jit_insn_get_native(LibJIT::Insn insn)
    %code{% RETVAL = (IV) jit_insn_get_native(insn); %};

LibJIT::Value jit_insn_call(LibJIT::Function func, const char *name, LibJIT::Function function, LibJIT::Type signature, std::vector<jit_value_t> args, int flags)
    %code{% RETVAL = jit_insn_call(func, name, function, signature, &args[0], args.size(), flags); %};

LibJIT::Value jit_insn_call_indirect(LibJIT::Function func, LibJIT::Value value, LibJIT::Type signature, std::vector<jit_value_t> args, int flags)
    %code{% RETVAL = jit_insn_call_indirect(func, value, signature, &args[0], args.size(), flags); %};

LibJIT::Value jit_insn_call_native(LibJIT::Function func, const char *name, IV native_func, LibJIT::Type signature, std::vector<jit_value_t> args, int flags)
    %code{% RETVAL = jit_insn_call_native(func, name, INT2PTR(void *, native_func), signature, &args[0], args.size(), flags); %};

{%

void
jit_insn_label(LibJIT::Function func, IN_OUTLIST LibJIT::Label label)

void
jit_insn_branch(LibJIT::Function func, IN_OUTLIST LibJIT::Label label);

void
jit_insn_branch_if(LibJIT::Function func, LibJIT::Value value, IN_OUTLIST LibJIT::Label label);

void
jit_insn_branch_if_not(LibJIT::Function func, LibJIT::Value value, IN_OUTLIST LibJIT::Label label);

LibJIT::Value
jit_insn_address_of_label(LibJIT::Function func, IN_OUTLIST LibJIT::Label label);

%}
